/// Sets mode of strictness of evaluating SPOT rules which will be applied on next component.
/// When 'draft' is set then +register and +default mixin is not required.
/// @group Component
/// @access public
/// @return { String } Current mode.
@function mode($mode) {
    @if $mode!='strict' and $mode!='draft' {
        @error $SPOT_ERROR_PREFIX + "mode/invalid-input - mode mixin accepts only value 'strict' or 'draft'.";
    }
    $_current-component-mode: $mode !global;
    @return $_current-component-mode;
}


/// Returns the current SPOT framework configuration.
/// @group General
/// @access public
/// @return { Map } Current SPOT framework configuration.
@function spot-config() {
    @return $_current-spot-config;
}


/// Returns a value for given key of the current SPOT framework configuration.
/// @group General
/// @access public
/// @return { any } Value for given key of the current SPOT framework configuration.
@function spot-get($config-key) {
    @return map-get($_current-spot-config, $config-key);
}


/// @group Component
/// @access public
/// @return { String } Current component selector.
@function component() {
    @if length($_current-components)==0  {
        @return ''; 
    }
    @else {
        @return #{$_current-components}; 
    } 
}


/// @group Component
/// @access public
/// @return { String } Current single top level component selector.
@function top-component() {
    @return #{first($_current-components)}; 
}


/// @group Component
/// @access public
/// @return { String } Current single component selector (the last one if nested).
@function self() {
    @return #{last($_current-components)}; 
}


/// Return variant name(s) and validate if exist(s).
/// @group Component
/// @access public
/// @param { String } $args...
/// @return { String } variant string identifier.
@function variant($args...) {
    /// @todo validate if exist 
    @return 'variant(' + $args + ')';
}


/// Return state name(s) and validate if exist(s).
/// @group Component
/// @access public
/// @param { String } $args...
/// @return { String } State string identifier.
@function state($args...) {
    /// @todo validate if exist 
    @return 'state(' + $args + ')';
}


/// Return context name(s) and validate if exist(s).
/// @group Component
/// @access public
/// @param { String } $args...
/// @return { String } context string identifier.
@function context($args...) {
    /// @todo validate if exist 
    @return 'context(' + $args + ')';
}


/// Return browser name(s) and validate if exist(s).
/// @group Component
/// @access public
/// @param { String } $args...
/// @return { String } browser string identifier.
@function browser($args...) {
    /// @todo validate if exist 
    @return 'browser(' + $args + ')';
}


/// Return responsive name(s) and validate if exist(s).
/// @group Component
/// @access public
/// @param { String } $args...
/// @return { String } responsive string identifier.
@function responsive($args...) {
    /// @todo validate if exist 
    @return 'responsive(' + $args + ')';
}


/// Tests if given selector contains pseudo element e.g. ::before or ::after.
/// @access public
/// @param { String } $selector - single selector
/// @return { Bool } True if contains pseudo element
@function contains-pseudo-element($selector) {
    @return _get-pseudo-element($selector)!=null;
}


/// Add selector specificity at all levels at once.
/// @access public
/// @param { String } $selector - Selector(s)
/// @param { Number } $id-spec - How many levels to add at id level (1..n)
/// @param { Number } $cl-spec - How many levels to add at class level (1..n)
/// @param { Number } $el-spec - How many levels to add at element level (1..n)
/// @return { String } Stronger selector(s).
@function add-specificity($selector, $id-spec: 0, $cl-spec: 0, $el-spec: 0) {
    @return add-element-specificity(add-class-specificity(add-id-specificity($selector, $id-spec), $cl-spec), $el-spec);
}

/// Add selector specificity at element level.
/// @access public
/// @param { String } $selector - Selector(s)
/// @param { Number } $n - How many levels to add (1..n)
/// @return { String } Stronger selector(s).
@function add-element-specificity($selector, $n) {
    @return _add-selector-specificity($selector, $n, '_');
}


/// Add selector specificity at class level.
/// @access public
/// @param { String } $selector - Selector(s)
/// @param { Number } $n - How many levels to add (1..n)
/// @return { String } Stronger selector(s).
@function add-class-specificity($selector, $n) {
    @return _add-selector-specificity($selector, $n, '._');
}


/// Add selector specificity at id level.
/// @access public
/// @param { String } $selector - Selector(s)
/// @param { Number } $n - How many levels to add (1..n)
/// @return { String } Stronger selector(s).
@function add-id-specificity($selector, $n) {
    @return _add-selector-specificity($selector, $n, '#_');
}


/// Add selector specificity to override given specificity.
/// It will make same selector specificity plus one extra element specificity to override it.
/// @access public
/// @param { String } $selector - Selector(s)
/// @param { Number } $id-specificity - Specificity of selector on id level
/// @param { Number } $id-specificity - Specificity of selector on id level
/// @throw SPOT CSS: override-selector-specificity/single-selector - given selector is not a single selector ('selector'). Just pass it as a separate argument.
/// @return { String } Stronger selector(s).
@function override-selector-specificity($selector, $id-specificity, $class-specificity, $element-specificity) {
    // Forcing using only single selector in one selector string. It could be passed more selectors in separate arguments.
    $parts: selector-parse($selector);
    @if length($parts)>1 {
        @error $SPOT_ERROR_PREFIX + "override-selector-specificity/single-selector - given selector is not a single selector ('"+$selector+"'). Just pass it as a separate argument.";
    } 
    $specificity: specificity($selector);
    $id-spec: nth($specificity, 1);
    $class-spec: nth($specificity, 2);
    $element-spec: nth($specificity, 3);

    // minimize useless selector strength
    @if $id-spec > $id-specificity {
        @return $selector;
    }
    @if $id-spec == $id-specificity and $class-spec > $class-specificity {
        @return $selector;
    }
    @if $id-spec == $id-specificity and $class-spec == $class-specificity and $element-spec > $element-specificity {
        @return $selector;
    }

    // element specificity is incremented to make stronger selector 
    $element-specificity: $element-specificity + 1;

    @if $id-specificity > $id-spec {
        $selector: add-id-specificity($selector, $id-specificity - $id-spec);
    }
    @if $class-specificity > $class-spec {
        $selector: add-class-specificity($selector, $class-specificity - $class-spec);
    }
    @if $element-specificity > $element-spec {
        $selector: add-element-specificity($selector, $element-specificity - $element-spec);
    }
    @return $selector;
}

 
/// Returns the specificity map or value of given simple/complex/multiple selector(s).
///
/// (Utility to calculate (and display) specificity or specificity map of any valid simple/compound/complex selector.)
/// @author David Khourshid (https://twitter.com/davidkpiano)
/// @access public
/// @param {List | String} $initial-selector - selector returned by '&'
/// @param {Bool} $integer (false) - output specificity as integer? (default: false)
/// @return {Map | Number} specificity map or specificity value represented as integer
@function specificity($initial-selector, $integer: false) {
    $initial-selector: _str-replace-batch(#{$initial-selector}, ('+', '>', '~'));
    $selectors: selector-parse($initial-selector);
    $specificities-map: ();
    
    @each $selector in $selectors {
        $parts: ();
        $selector-specificity-map: (a: 0, b: 0, c: 0);
        
        @each $simple-selectors in $selector {
            @each $simple-selector in simple-selectors($simple-selectors) {
                $parts: append($parts, $simple-selector);
            }
        }
        
        @each $part in $parts {
            $specificity-type: _specificity-type($part);
            @if $specificity-type {
                $selector-specificity-map: map-merge($selector-specificity-map, (#{$specificity-type}: map-get($selector-specificity-map, $specificity-type) + 1));
            }
        }
        
        $specificities-map: map-merge($specificities-map, (_specificity-value($selector-specificity-map): $selector-specificity-map));
    }
    
    $specificity-value: max(map-keys($specificities-map)...);
    $specificity-map: map-values(map-get($specificities-map, $specificity-value));
    
    @return if($integer, $specificity-value, $specificity-map);
}


/// Override current selector over given selector.
/// @access public
/// @param { String } $current-selector - Selector(s) to be strengthen
/// @param { String } $args... - Selector(s) to override
/// @throw SPOT CSS: override/single-selector - given selector is not a single selector ('selector'). Just pass it as a separate argument.
/// @return { String } Stronger selector(s).
@function override($current-selector, $args...) {
    // find strongest specificity in $args
    $strongest-specificity: 0;
    $strongest-selector: null;
    @each $selector in $args {
        $parts: selector-parse($selector);
        // @feature Forcing using only single selector in one selector string. It could be passed more selectors in separate arguments.
        @if length($parts)>1 {
            @error $SPOT_ERROR_PREFIX + "override/single-selector - given selector is not a single selector ('"+$selector+"'). Just pass it as a separate argument.";
        }        
        $specificity: specificity($selector, true);
        @if $specificity > $strongest-specificity {
            $strongest-specificity: $specificity;
            $strongest-selector: $selector;
        }
    }
    // calculate specificity of the strongest selector
    $specificity: specificity($strongest-selector);
    $id-specificity: nth($specificity, 1);
    $class-specificity: nth($specificity, 2);
    $element-specificity: nth($specificity, 3);
   
    // for each selector
    $selectors: selector-parse($current-selector);
    $output: (); 
    @each $selector in $selectors {
        $selector: override-selector-specificity($selector, $id-specificity, $class-specificity, $element-specificity);
        $output: append($output, $selector, 'comma');
    }
    @return #{$output};
}


/// Filter given selector with given sub-selectors.
/// Every selector which does not contain any of given args will be excluded.
/// @access public
/// @param { String } $current-selector - Selector(s) to be strengthen
/// @param { String } $args... - Selector(s) to override
/// @throw SPOT CSS: only-for/already-used-selector - the only-for('selector') is already used somewhere higher! Do not break the SPOT rule and use just single place for every entity.
/// @throw SPOT CSS: only-for/pseudo-element - given selector ('selector') is a pseudo selector. Use mixin pseudo-element for this job.
/// @throw SPOT CSS: only-for/not-found - given branch selector was not found at the end of current selector ('selector').
/// @return { String } Filtered selector(s).
@function only-for($selector, $args...) {
    $selectors: selector-parse($selector);
    $output: (); 
    $found: false;
    $found-branch: '';
    @each $sel in $selectors {
        $match: false;
        $sel: to-string($sel);
        @each $branch in $args {
            $branch: _remove-mutation-wrapper($branch);
            @if selector-contains($sel, $branch) {
                $match: true;
                $found: true;
                $found-branch: $branch;
            }
            // Exception: If some of theese selectors, it will apply it on current selector.
            //   :first-* [:first-child, :first-of-type]
            //   :last-*  [:last-child, :last-of-type]
            //   :nth-*   [:nth-child(n), :nth-last-child(n), :nth-last-of-type(n), :nth-of-type(n)]
            //   :only-*  [:only-of-type, :only-child]
            //   :empty
            @else if str-index($branch, ':first-') or  str-index($branch, ':last-') or str-index($branch, ':nth-') or str-index($branch, ':only-') or str-index($branch, ':empty') {
                // except pseudo elements ::first-letter and ::first-line (but check for one ':')
                @if str-index($branch, '::')==null and str-index($branch, ':first-letter')==null and str-index($branch, ':first-line')==null {
                    $found: true;
                    $complete-selector: $sel + $branch;
                    @if index($_already-used-selectors, $complete-selector) {
                        @error $SPOT_ERROR_PREFIX + "only-for/already-used-selector - the only-for('" + $branch + "') is already used somewhere higher! Do not break the SPOT rule and use just single place for every entity.";
                    }
                    $_already-used-selectors: append($_already-used-selectors, $complete-selector) !global;

                    $output: append($output, $complete-selector, 'comma');
                }
                @else {
                    @error $SPOT_ERROR_PREFIX + "only-for/pseudo-element - given selector ('"+$selector+"') is a pseudo selector. Use mixin pseudo-element for this job.";
                }
            }
        }
        @if $match {
            @if index($_already-used-multiple-selectors, $sel) {
                @error $SPOT_ERROR_PREFIX + "only-for/already-used-selector - the only-for('" + $found-branch + "') is already used somewhere higher! Do not break the SPOT rule and use just single place for every entity.";
            }
            $_already-used-selectors: append($_already-used-selectors, $sel) !global;
            $_already-used-multiple-selectors: append($_already-used-multiple-selectors, $sel) !global;
            $output: append($output, $sel, 'comma');
        }
    }
    @if not $found {
        @error $SPOT_ERROR_PREFIX + "only-for/not-found - given branch selector was not found at the end of current selector ('"+$selector+"').";
    }
    @return #{$output};
}



/// Extend subselector of selector with given extension.
/// @access public
/// @param { String } $selectors - single/multiple simple/combinator selectors 
/// @param { String } $subselectors - single/multiple simple selectors 
/// @param { String } $extensions - single/multiple simple selectors
///
/// @todo if same subselectors, how to address concrete one? 
// +component('page1')
//     +register
//         +element('.wrapper')
//             +element('.wrapper')
//                 +state(':hover')

//     +default

//     +___________________
//     +element('.wrapper')

//         +___________________
//         +element('.wrapper')
//             +default
//             +state(':hover')
//                 color: red
//
@function extend($selectors, $subselectors, $extensions) {
    $selector-parts: selector-parse($selectors);
    $subselector-parts: selector-parse($subselectors);
    $extension-parts: selector-parse($extensions);
    $output: ();
    // for each selector (if more selectors in $selectors) check if extended selector is present
    @each $selector in $selector-parts {
        $found: false;
        @each $subselector in $subselector-parts {
            @if $found==false {
                $found: str-index($selector + '', $subselector + '')!=null;
                @if $found {
                    // fix for new version of SASS which sometimes removes quotes from attribute selectors, e.g: [class^="custom-footer"] ---> [class^=custom-footer]
                    $contains-double-quotes: str-index($subselector + '', '"')!=null;
                    $contains-single-quotes: str-index($subselector + '', "'")!=null;
                    
                    @if $contains-double-quotes or $contains-single-quotes {
                        @if $contains-double-quotes {
                            $subselector: str-replace($subselector + '', '"', '');
                        }
                        @if $contains-single-quotes {
                            $subselector: str-replace($subselector + '', "'", '');
                        }

                        $found: str-index($selector + '', $subselector + '')!=null;
                    }
                }
            }
            @each $extension in $extension-parts {
                $sub: _remove-combinator-selector($subselector);
                $replacement: $sub+$extension+''; // +'' = convert to string
                @if is-element-selector($extension) {
                    // if "element selector+''" extension e.g. "div", put it at the beginning of the selector
                    $replacement: $extension+$sub+''; // +'' = convert to string
                }                
                $selector: selector-replace($selector, $sub, $replacement);                 
            }
        }
        @if $found==false {
            @error $SPOT_ERROR_PREFIX + 'extend/subselector-not-found - Extend function has failed! Subselector "'+$subselectors+'" was not found in selector "'+$selector+'".';
        }
        $output: append($output, $selector, 'comma');
    }
    @return $output;
}


/// @todo tests
// test if selector contains simple subselector
@function selector-contains($selector, $simple-sub-selector) {
    $selectors: selector-parse($selector);
    @each $single-selector in $selectors {
        @each $simple-selector in $single-selector {
            @if is-superselector($simple-sub-selector, $simple-selector) {
                @return true;
            }
        }
    }
    @return false;
}


@function first($list) {
    @return nth($list, 1);
}


@function last($list) {
    @return nth($list, length($list));
}


// @description Complementary to append() function.
@function prepend($list, $value) {
    @return join($value, $list);
}


// @description Remove the last item in the list (opposite of append() function).
// @returns new list, not last item (to do so use last() function)
@function pop($list) {
    $result: ();
    $len: length($list);
    @if $len>1 {
        @for $i from 1 through $len - 1 {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}


// @description Remove the first item in the list.
// @returns new list, not first item (to do so use first() function)
@function shift($list) {
    $result: ();
    $len: length($list);
    @if $len>1 {
        @for $i from 2 through $len {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

@function replace-nth($list, $index, $value-or-list) {
    $result: ();

    @for $i from 1 through length($list) {
        @if $i == $index {
            @if type-of($value-or-list)=='list' {
                @each $item in $value-or-list {
                    $result: append($result, $item);
                }                
            }
            @else {
                $result: append($result, $value-or-list);
            }
        }
        @else {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}


@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}


@function str-trim-left($s) {
    @while (str-index($s, ' ')==1) {
        $i: str-index($s, ' ');
        $s: "#{str-slice($s, 0, $i - 1)}#{str-slice($s, $i + 1)}";
    }
    @return $s;
}


@function str-trim-right($s) {
    @while (str-slice($s, str-length($s))==' ') {
        $i: str-index($s, ' ');
        $s: "#{str-slice($s, 0, $i - 1)}#{str-slice($s, $i + 1)}";
    }
    @return $s;
}


@function str-trim($s) {
    @return str-trim-left(str-trim-right($s));
}


@function str-last-char($s) {
    @return str-slice(str-trim-right($s), -1);
}


@function selector-normalize-spaces($selector) {
    // unify '> ' with space
    $selector: str-replace(str-replace($selector, '> ', '>'), '>', '> ');
    // unify ' >' with space
    $selector: str-replace(str-replace($selector, ' >', '>'), '>', ' >');
    // unify '> ' with space
    $selector: str-replace(str-replace($selector, '~ ', '~'), '~', '~ ');
    // unify ' >' with space
    $selector: str-replace(str-replace($selector, ' ~', '~'), '~', ' ~');
    // unify '> ' with space
    $selector: str-replace(str-replace($selector, '+ ', '+'), '+', '+ ');
    // unify ' >' with space
    $selector: str-replace(str-replace($selector, ' +', '+'), '+', ' +');
    @return str-trim($selector);
}

// replace $search from the beginning or from the end of given single selector
@function selector-trim($selector, $search) {
    $selector: str-trim($selector);
    $index: str-index($selector, $search);
    $max: str-length($selector);

    @while $index==1 or $index==$max  {
        $selector: str-trim(str-slice($selector, 1, $index - 1) + str-slice($selector, $index + str-length($search)));
        $index: str-index($selector, $search);
        $max: str-length($selector);
    }

    @return $selector;
}

// it replaces '>', '~', '+' from the beginning or from the end of single selector
// @see @function _remove-combinator-selector($simple-selector)
@function selector-trim-combinators($selector) {
    $selector: selector-trim($selector, '>');
    $selector: selector-trim($selector, '~');
    $selector: selector-trim($selector, '+');
    @return $selector;
}

// if selector contains/starts with '>', '~', '+', prepend given $extension after the combinator selector
@function selector-prepend-extension($selector, $extension) {
    $selector: str-trim($selector+''); 
    $first: str-slice($selector, 1, 1);
    $starts_with_combinator: $first=='>' or $first=='~' or $first=='+';
    // @debug '$starts_with_combinator: '+$selector+' | '+ $first +' | '+$starts_with_combinator;
    @if $starts_with_combinator {
        @return $first + ' ' + $extension + str-trim(str-slice($selector, 2, -1));
    }
    @else {
        @return $extension + $selector;
    }
}

// It has to be simple selector (not contain comma separated selectors)
// @return How many selector levels given selector contains.
// @example:
//  'a.link' => 1 
//  'a.link span' => 2
//  'a.link + span' => 3
//  '> a.link' => 2
@function length-of-simple-selector($selector) {
    @return length(nth(selector-parse($selector),1));
}


@function to-string($value) {
    @return inspect($value);
}


@function pow($number, $exponent) {
    $value: 1;
    @if $exponent > 0 {
        @for $i from 1 through $exponent {
        $value: $value * $number;
        }
    }
    @return $value;
}


/// Remove item from list. Supports also negative index (from the end).
/// @author Jakob Eriksen (https://gist.github.com/jakob-e)
@function nth-delete($list, $n) {
    $result: ();
    $n: if($n < 0, length($list) + $n + 1, $n);
    $bracketed: is-bracketed($list);
    $separator: list-separator($list);
    @for $i from 1 through length($list){
        @if $i != $n { $result: append($result, nth($list, $i)); }
    }
    @return join((), $result, $separator, $bracketed);
}


@function merge-selectors($selector1, $selector2) {    
    $selectors-1: selector-parse($selector1);
    $selectors-2: selector-parse($selector2);
    $output: [];
    @each $sel-1 in $selectors-1 {
        @each $sel-2 in $selectors-2 {

            $new-selector: [];
            @each $partial-selector-1 in $sel-1 {
                $match: false;
                $match-at-index: null;
                $i: 0;
                @each $partial-selector-2 in $sel-2 {
                    $i: $i + 1;
                    @if not _is-selector-combinator($partial-selector-1) and not _is-selector-combinator($partial-selector-2) {
                        $first-simple-selector-1: nth(simple-selectors($partial-selector-1), 1);
                        $first-simple-selector-2: nth(simple-selectors($partial-selector-2), 1);
                        @if $first-simple-selector-1!="" and $first-simple-selector-2!="" {
                            @if $first-simple-selector-1 == $first-simple-selector-2 {
                                $match: true;
                                $match-at-index: $i;
                            }
                        }
                    }
                }
                @if not $match {
                    $new-selector: append-unbracketed($new-selector, $partial-selector-1, 'space');
                }
                @else {
                    $matched-selector: simple-selectors(nth($sel-2, $match-at-index));
                    $addon: nth-delete($matched-selector, 1);
                    $new-selector: append-unbracketed($new-selector, $partial-selector-1 + $addon, 'space');
                    // remove matched part
                    $sel-2: nth-delete($sel-2, $match-at-index);
                }
            }
            // predend rest of $sel-2 into beginning of $new-selector            
            $new-selector: _prepend-selector-context($new-selector, $sel-2);
            $output: append-unbracketed($output, $new-selector, 'comma');
        }
    }
    $output: join([], $output, 'comma', $bracketed: false);
    @return #{$output};
}


// fix because some version of SASS returns bracketed list 
@function append-unbracketed($list, $item, $separator) {
    @return join([], append($list, $item,  $separator), $separator: auto, $bracketed: false);
}

// Simple selector is "a" or ".link" but not "a.link"
@function is-simple-selector($single-selector) {
    $selectors: simple-selectors($single-selector);
    @return length($selectors)==1;
}

// Element selector starts with element
@function is-element-selector($single-selector) {
    $first: str-slice($single-selector+'', 1, 1);
    @return $first!='#' and $first!='.' and $first!='[' and $first!=':' and $first!='*' and $first!='_'; // "_" because we are using '___SUbSELECTOR_TO_EXTEND___' and no element starts with _
}

// Check if given element selector is standard html element
@function is-standard-html-element($single-simple-selector) {
    @if selector-unify($single-simple-selector, $_all-html-elements) {
        @return true;
    }
    @return false;
}

// returns length of the combinator selector, e.g. 'header > .btn' => 3
@function combinator-selector-length($combinator-selector) {
    $selector: nth(selector-parse($combinator-selector), 1);
    @return length($selector);
}

// 'header > .btn' => '.btn'
@function get-last-element-in-combinator-selector($combinator-selector) {
    $selector: nth(selector-parse($combinator-selector), 1);
    @return nth($selector, length($selector));
}

// ('my-component .x > .i', '.x') => false
// ('my-component .inner-wrapper.x > .i', '.x') => false
// ('my-component .inner-wrapper > .i', '.x') => false
// ('my-component div.inner-wrapper.x > .i', '.x') => true  (the "div" matters")
@function is-part-of-element-subselector($single-selector, $sub-selector) {
    $selector: nth(selector-parse($single-selector), 1);
    @each $part-selector in $selector {
        @if is-superselector($sub-selector, $part-selector) {
            @if is-element-selector($part-selector) {
                @return true;
            }
            @else {
                @return false;
            }
        }
    }
    @return false;
}

/// Finds given sub-selector in given selectors
/// selector-contains('a.btn div, a div.btnx.zzz', '.zzz.btnx') => true
@function selector-contains($combinator-selector, $sub-single-selector) {
    // split $sub-single-selector to single selectors, e.g. ".something.huge" => (".something", ".huge")
    $sub-parts: nth(selector-parse($sub-single-selector), 1); // take first selector (it doesn't expect multiple)
    $sub-selector: nth($sub-parts, length($sub-parts)); // take last (it expect just one, but for sure)

    // for eeach of multiple selectors
    $selector: selector-parse($combinator-selector);
    @each $single-selector in $selector {
        @each $part-selector in $single-selector {
            @if is-superselector($sub-selector, $part-selector) {
                @return true;
            }
        }
    }
    @return false;
}

@function assert($current-selectors, $asserted-selectors, $throw-warn: true) {
    $current-selectors: selector-parse($current-selectors);
    $original-selectors-copy: $current-selectors;
    $asserted-selectors: selector-parse($asserted-selectors);
    $matched-count: 0;
    $j: 0;
    @each $current in $current-selectors {
        $j: $j + 1;
        $matched: false;
        $i: 0;
        @each $asserted in $asserted-selectors {
            @if $matched==false {
                $i: $i + 1;
                
                @if (length($current)==length($asserted)) {
                    $len: length($current);
                    $counter: 0;
                    @for $n from 1 through $len {
                        $a: nth($asserted, $n);
                        $c: nth($current, $n);
                        // to match '.btn.x.y' with '.btn.y.x'
                        @if is-superselector($a, $c) and is-superselector($c, $a) {
                            $counter: $counter + 1;
                        }
                    }                    
                    @if $counter == $len {
                       $matched: true; 
                    }
                }
            }
        }
        @if $matched {
            // remove matched selector
            $asserted-selectors: nth-delete($asserted-selectors, $i);
            $original-selectors-copy: nth-delete($original-selectors-copy, $j);
            $j: $j - 1;
            $matched-count: $matched-count + 1;
        }
    }
    @if length($asserted-selectors)>0 {
        @if $throw-warn {
            $throw: _warn('selector/assert', 'asserted selector(s) `'+inspect($asserted-selectors)+'` was not found in current selector(s) `'+inspect($current-selectors)+'`.');
        }
        @return false;
    }
    @if length($original-selectors-copy)>0 {
        @if $throw-warn {
            $throw: _warn('selector/assert', 'some of current selector(s) `'+inspect($original-selectors-copy)+'` was not matched with asserted selector(s).');
        }
        @return false;
    }
    @return true;
}