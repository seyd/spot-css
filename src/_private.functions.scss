/// Create unique string for combination $component + $identifier.
/// @group Component
/// @access private
/// @return { String } Unique string identifier.
@function _get-component-identifier($component, $identifier) {
    @return $component+'---'+$identifier;
}


/// Create unique string for combination $component + $modifier.
/// @group Component
/// @access private
/// @return { String } Unique string modifier.
@function _get-component-modifier($component, $modifier) {
    @return $component+'___'+$modifier;
}


/// @todo tests
/// @access private
@function _add-default-ampersand-if-context($modifier-name, $identifier) {
    @if str-index($modifier-name, '&') and not str-index($identifier, '&') {
        // when selector does not define '&' implicitly, it add it on the end of selector by default
        @return $identifier + ' &';
    }
    @else {
        @return $identifier;
    }
}


// add selector specificity at `given` level
@function _add-selector-specificity($selector, $n, $not-what-mark) {
    $selectors: selector-parse($selector);
    $output: ();
    $addon: '';
    @for $i from 1 to $n+1 {
        $addon: $addon + ':not(' + $not-what-mark + ')';
    }
    // for each selector (if more selectors in $selector)
    @each $single-selector in $selectors {
        $single-selector: to-string($single-selector);
        @if str-index($single-selector, ':before')!=null {
            $single-selector: str-replace(str-replace($single-selector, '::before', ''), ':before', '');
            $single-selector: $single-selector + $addon + '::before';
        }
        @else if str-index($single-selector, ':after')!=null {
            $single-selector: str-replace(str-replace($single-selector, '::after', ''), ':after', '');
            $single-selector: $single-selector + $addon + '::after';
        }
        @else {
            $single-selector: $single-selector + $addon;
        }
        $output: append($output, $single-selector, 'comma');
    }
    @return #{$output};
}


// see test /private/functions/get-all-combinations.sass
// recursive
@function _get-all-combination($args...) {
    $len: length($args);
    @if $len==0 {
        @return []; 
    }
    $combinations: [];
    @for $i from 1 through $len {
        $comb: [];
        $comb: append($comb, nth($args, $i), 'comma');
        $rest: _get-all-combination( nth-delete($args, $i)... );
        @each $rest-comb in $rest {
            $combinations: append($combinations, join($comb, $rest-comb), 'comma');
        }
        @if length($rest)==0 {
            $combinations: append($combinations, $comb, 'comma');
        }
    }

    @return $combinations;
}

 
/// SCSS Specificity Calculator
///
/// Replaces a batch of substrings (needles) in a string (haystack)
/// with a single replacement string.
///
/// (Utility to calculate (and display) specificity or specificity map of any valid simple/compound/complex selector.)
/// @author David Khourshid (https://twitter.com/davidkpiano)
/// @access private
/// @param {String} $haystack - string to perform search and replacement on
/// @param {List | String} $needles - string or list of strings to replace globally
/// @param {String} $replacement ('') - replacement string to replace needles
/// @return {String} replaced string
@function _str-replace-batch($haystack, $needles, $replacement: '') {
    $instances: false;
    
    @if not type_of($needles) == list { $needles: ($needles); }
    
    @while ($instances == false) or ($instances > 0) {
        $instances: 0;
        
        @each $needle in $needles {
            $needle-index: str-index($haystack, $needle);
            $instances: $instances + if($needle-index, 1, 0);
            
            @if $needle-index {
                $haystack: str-slice($haystack, 1, $needle-index - 1) + str-slice($haystack, $needle-index + str-length($needle), -1);
                $haystack: str-insert($haystack, $replacement, $needle-index);
            }
        }
    }
    
    @return $haystack;
}
 

/// Signifies what specificity type the simple selector is.
/// a - IDs
/// b - class selectors, attribute selectors, pseudo-classes
/// c - type (element) selectors, pseudo-elements
///
/// (Utility to calculate (and display) specificity or specificity map of any valid simple/compound/complex selector.)
/// @author David Khourshid (https://twitter.com/davidkpiano)
/// @access private
/// @param {String} $simple-selector - a single simple selector
/// @return {String} specificity type of simple selector - 'a', 'b', 'c', or false
@function _specificity-type($simple-selector) {
    $types: (
        c: (':before', ':after', ':first-line', ':first-letter', ':selection'),
        b: ('.', '[', ':'),
        a: ('#')
    );
    
    $simple-selector: _str-replace-batch($simple-selector, '::', ':');
    
    @if str-index($simple-selector, ':not(') == 1 {
        $simple-selector: str-slice($simple-selector, 6, -2);
    }
    
    @each $type-key, $type-tokens in $types {
        @each $token in $type-tokens {
            @if str-index($simple-selector, $token) == 1 {
                @return $type-key;
            }
        }
    }
    
    // Ignore the universal selector
    @if str-index($simple-selector, '*') == 1 {
        @return false;
    }
    
    // Simple selector is type selector (element)
    @return c;
}

 
/// Returns the specificity value (in the specified base).
/// Base is set to 256 (16^2) to accurately represent historical 6-digit
/// hexadecimal representation of specificity in most browsers, though this
/// limitation has been "resolved" in some browsers (try base 65536 for those).
///
/// (Utility to calculate (and display) specificity or specificity map of any valid simple/compound/complex selector.)
/// @author David Khourshid (https://twitter.com/davidkpiano)
/// @access private
/// @param {Map} $specificity-map - map of frequency of each type (a, b, c) in complex selector
/// @param {Number} $base (256) - base used to calculate specificity value (default: 256)
/// @return {Number} specificity value of given specificity map as base 10 integer
@function _specificity-value($specificity-map, $base: 256) {
    $exponent-map: (a: 2, b: 1, c: 0);
    $specificity: 0;
    
    @each $specificity-type, $specificity-value in $specificity-map {
        $specificity: $specificity + ($specificity-value * pow($base, map-get($exponent-map, $specificity-type)));
    }
    
    @return $specificity;
}


/// Checks if mixin register was already called in component.
/// @access private
/// @return {Boolean} True if mixin register was already called in current component.
@function _register-mixin-was-already-called() {
    @return index($_register-called-on, component()) != null;
}


/// Checks if mixin default was already called in current selector.
/// @access private
/// @return {Boolean} True if mixin register was already called in current selector.
@function _default-mixin-was-already-called() {
    @return index($_default-called-on, &) != null;
}


/// Check if given modifier name is context-like modifier.
/// @access private
/// @param {String} $modifier-name - name of modifier
/// @return {Boolean} True if given modifier name is context-like modifier.
@function _is-modifier-context-like($modifier-name) {
    @return str-index($modifier-name, ' &') != null; // 'context &' | 'responsive &' | 'browser &' 
}


@function _prepend_selector_context($selector, $context) {
    $html-element-part: [];
    $body-element-part: [];
    $rest-selector-part: [];
    // split selector into 3 parts (html, body and rest)
    @each $partial-selector in $selector {
        $first-part: to-lower-case(nth(simple-selectors($partial-selector), 1));
        @if $first-part == 'html' {
            $html-element-part: append($html-element-part, $partial-selector, 'space');
        }
        @else if $first-part == 'body' {
            $body-element-part: append($body-element-part, $partial-selector, 'space');
        }
        @else {
            $rest-selector-part: append($rest-selector-part, $partial-selector, 'space');
        }
    }
    // add context
    @each $partial-selector in $context {
        $first-part: to-lower-case(nth(simple-selectors($partial-selector), 1));
        @if $first-part == 'html' {
            $html-element-part: append($html-element-part, $partial-selector, 'space');
        }
        @else if $first-part == 'body' {
            $body-element-part: append($body-element-part, $partial-selector, 'space');
        }
        @else {
            $rest-selector-part: append($rest-selector-part, $partial-selector, 'space');
        }
    }
    // join parts
    $selector: join(join($html-element-part, $body-element-part), $rest-selector-part);
    @return #{ $selector };
}