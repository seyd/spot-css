/// Prefix of the SPOT CSS Framework errors.
/// @access private
/// @type String
$SPOT_ERROR_PREFIX: "SPOT CSS: ";


/// Default SPOT framework configuration.
/// @group General
/// @access private
/// @type Map
$_default-spot-config: (
    // (default true) If true then force using +______________ element separators before every element and pseudo-element.
    force-element-separator: true,
    // (default false) If true then there wouldn't be possible to create a component from simple element selector, e.g. +component('a') or +component('header').
    disallow-simple-element-components: false,
    // (default '') If `disallow-simple-element-components` is true, you can set expceptions for some elements with multiple selectors, e.g. 'button, select, textarea'.
    exceptions-of-simple-element-components: '',
);


/// Current SPOT framework configuration. You can use `spot-config` or `spot-set` mixins to override it.
/// @group General
/// @access private
/// @type Map
/// @see mixin spot-config, function spot-config, mixin spot-set, function spot-get
$_current-spot-config: $_default-spot-config;


/// Map of registered components.
/// @group Component
/// @access private
/// @type Map
$_registered-components: ();
$_registered-components-for-spot-exception-element: ();
$_registered-components-for-spot-exception-selector: ();


/// Current component or stack of current components (if multiple are nested).
/// @group Component
/// @access private
/// @type Map
$_current-components: ();

/// Default value of mode of strictness of evaluating SPOT rules.
/// @group Component
/// @access private
/// @type String
$_default-component-mode: 'strict';

/// Current value of mode of strictness of evaluating SPOT rules which will be applied on next component.
/// Allowed values are 'strict' and 'draft'.
/// @group Component
/// @access private
/// @type String
$_current-component-mode: $_default-component-mode;


/// Current media or stack of current media queries (if multiple are used).
/// @group Component
/// @access private
/// @type List
$_current-media-stack: [];


/// Current container or stack of current container queries (if multiple are used).
/// @group Component
/// @access private
/// @type List
$_current-container-stack: [];


/// Flag of register mode - if parser enters mixin register.
/// @group Component
/// @access private
/// @type Bool
$_is-register-mode: false;


/// Flag of default mode - if parser enters mixin default.
/// @group Component
/// @access private
/// @type Bool
$_is-default-mode: false;


/// Flag of modifier mode - if parser enters mixin variant, state, context, browser or responsive.
/// @group Component
/// @access private
/// @type Bool
$_is-modifier-mode: false;


/// Flag of child-component mode - if parser enters mixin child-component.
/// @group Component
/// @access private
/// @type Bool
$_is-child-component-mode: false;


/// Flag of sub-component mode - if parser enters mixin sub-component.
/// @group Component
/// @access private
/// @type Bool
$_is-sub-component-mode: false;


/// Flag of only-for block - if parser enters mixin only-for.
/// @group Component
/// @access private
/// @type Bool
$_is-in-only-for-block: false;


/// Last used modifier name ('variant', 'state', 'context', 'browser' or 'responsive').
/// @group Component
/// @access private
/// @type String
$_current_modifier: '';


/// All types of modifiers (mixins)
/// @group Component
/// @access private
/// @type List
$_all_types_of_modifiers: 'state', 'variant', 'context', 'responsive', 'browser', 'internal-state';


/// Map of registered modifiers, e.g. state, variant, context, ...
/// @group Component
/// @access private
/// @type Map
$_registered-modifiers: ();


/// List of registered identifiers for guarding uniqueness (per component).
/// @group Component
/// @access private
/// @type List
$_registered-identifiers: [];


/// List of registered aliases of modifiers for guarding uniqueness (per component).
/// @group Component
/// @access private
/// @type List
$_registered-modifier-aliases: [];


/// List of registered aliases of elements for guarding uniqueness (per component).
/// Key is component selector + alias
/// @group Component
/// @access private
/// @type Map
$_registered-component-aliases: ();


/// List of registered aliases of elements for guarding uniqueness (per component element).
/// Key is component selector + alias
/// @group Component
/// @access private
/// @type Map
$_registered-component-element-aliases: ();


/// List of registered sub-subelements for guarding uniqueness and required register (per component).
/// @group Component
/// @access private
/// @type List
$_registered-sub-elements: [];


/// Map of registered sub-components for guarding uniqueness and required register (per component).
/// Key is component selector(s).
/// @group Component
/// @access private
/// @type Map
$_registered-sub-components: ();
$_registered-sub-components-for-spot-exception-element: ();
$_registered-sub-components-for-spot-exception-selector: ();


/// List of calling register mixin for each component.
/// @group Component
/// @access private
/// @type List
$_register-called-on: [];


/// List of calling defualt mixin for each component element.
/// @group Component
/// @access private
/// @type List
$_default-called-on: [];


/// List of selectors where sub selectors was applied, 
/// where mixin child-element(), sub-element(), pseudo-element() was called.
/// @group Component
/// @access private
/// @type List
$_selectors-with-sub-elements: [];


/// List of already used selectors for watching multiple using
/// of state(), variant(), context(), browser() and responsive().
/// @group Component
/// @access private
/// @type List
$_already-used-selectors: [];
$_already-used-selectors-for-spot-exception-element: [];
$_already-used-selectors-for-spot-exception-selector: [];


/// List of already used selectors (also multiple) for watching multiple using
/// to be able distinct between +variant('.apple', '.orange') and inside +only-for('.apple').
/// @group Component
/// @access private
/// @type List
$_already-used-multiple-selectors: [];
$_already-used-multiple-selectors-for-spot-exception-element: [];
$_already-used-multiple-selectors-for-spot-exception-selector: [];


/// Map of used modifiers per component - if were used already, e.g. state, variant, context, ...
/// Key is component selector(s), value is map of "variant .primary": true, "context body.loaded": true
/// @group Component
/// @access private
/// @type Map
$_checklist-of-used-modifiers: ();

/// Map of used modifiers (nested) per component, e.g. state, variant, context, ...
/// @group Component
/// @access private
/// @type Map
$_used-modifiers: ();

/// Map of current modifiers stack per component, e.g. state, variant, context, ...
/// @group Component
/// @access private
/// @type Map
$_current-modifiers-stack: ();


/// Helper variable for remember given super component index as first argument
/// for mixins super-state and super-variant.
/// @group Component
/// @access private
/// @type Number | null
$_super-component-index: null;


/// Flag if mandatory separator (mixin ________) was used before sub-element modifier.
/// @group Component
/// @access private
/// @type Bool
$_was-used-sub-element-separator: false;


/// Standard pseudo elements by https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
/// @group Component
/// @access private
/// @type List
$_standard-pseudo-elements: 'before', 'after', 'backdrop', 'cue', 'cue-region', 'first-letter', 'first-line', 'file-selector-button', 'grammar-error', 'marker', 'part(', 'placeholder', 'selection', 'slotted(', 'spelling-error(', 'target-text';


/// List of registered global-responsive(s).
/// @group Global
/// @access private
/// @type Map
$_registered-global-responsives: ();


/// List of registered global-context(s).
/// @group Global
/// @access private
/// @type Map
$_registered-global-contexts: ();


/// List of registered global-browser(s).
/// @group Global
/// @access private
/// @type Map
$_registered-global-browsers: ();


/// Helpper variable for +component filtering in +only-for mixin (if multiple selectors).
/// @group Global
/// @access private
/// @type String
$_current-component-selectors-for-only-for: '';


/// Helpper variable for +elements filtering in +only-for mixin.
/// @group Global
/// @access private
/// @type String
$_current-element-selectors-for-only-for: '';


/// List of all messages collected when calling the +print mixin.
/// @group Component
/// @access private
/// @type List
$_component_messages: [];


// source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element (except of the deprecated but some exceptions)
$_all-html-elements: 'a, abbr, address, area, article, aside, audio, b, base, bdi, bdo, blockquote, body, br, button, '+
                     'canvas, caption, center, cite, code, col, colgroup, data, datalist, dd, del, details, dfn, dialog, dir, div, dl, dt, '+
                     'em, embed, fieldset, figcaption, figure, footer, form, frame, frameset, h1, h2, h3, h4, h5, h6, head, header, hgroup, hr, html, '+
                     'i, iframe, img, input, ins, kbd, label, legend, li, link, main, map, mark, marquee, menu, meta, meter, nav, noscript, '+
                     'object, ol, optgroup, option, output, p, picture, portal, pre, progress, q, rp, rt, ruby, '+
                     's, samp, script, section, select, slot, small, source, span, strong, style, sub, summary, sup, '+
                     'table, tbody, td, template, textarea, tfoot, th, thead, time, title, tr, track, tt, u, ul, var, video, wbr';